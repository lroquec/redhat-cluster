---
# Tasks to create a simple test service
- name: Ensure the application group exists
  group:
    name: "{{ app_group }}"
    state: present
    system: yes
  tags: test_service

- name: Ensure the application user exists
  user:
    name: "{{ app_user }}"
    group: "{{ app_group }}"
    system: yes
    create_home: no
    state: present
  tags: test_service

- name: Create directory for the test application
  file:
    path: "/opt/{{ app_service_name }}/bin"
    state: directory
    mode: '0755'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  tags: test_service

- name: Create directory for logs
  file:
    path: "/var/log/{{ app_service_name }}"
    state: directory
    mode: '0755'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  tags: test_service

- name: Create startup script for the test service
  copy:
    content: |
      #!/bin/bash
      # Script to start the example service
      
      PID_FILE="{{ app_pid_file }}"
      LOG_FILE="/var/log/{{ app_service_name }}/service.log"
      
      # Create log directory if it does not exist
      mkdir -p /var/log/{{ app_service_name }}
      
      # Write to the log
      echo "$(date): Starting test service {{ app_service_name }}..." >> $LOG_FILE
      
      # Start a simple background process
      while true; do
          echo "$(date): Service {{ app_service_name }} running" >> $LOG_FILE
          sleep 30
      done &
      
      # Save the PID
      echo $! > $PID_FILE
      chmod 644 $PID_FILE
      
      echo "Service started with PID $(cat $PID_FILE)"
      exit 0
    dest: "{{ app_start_script }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  tags: test_service

- name: Create stop script for the test service
  copy:
    content: |
      #!/bin/bash
      # Script to stop the example service
      
      PID_FILE="{{ app_pid_file }}"
      LOG_FILE="/var/log/{{ app_service_name }}/service.log"
      
      if [ -f "$PID_FILE" ]; then
          PID=$(cat $PID_FILE)
          echo "$(date): Stopping service with PID $PID..." >> $LOG_FILE
          
          # Check if the process exists
          if ps -p $PID > /dev/null; then
              kill $PID
              echo "$(date): Service stopped." >> $LOG_FILE
          else
              echo "$(date): The process does not exist." >> $LOG_FILE
          fi
          
          # Remove PID file
          rm -f $PID_FILE
      else
          echo "$(date): PID file not found." >> $LOG_FILE
      fi
      
      exit 0
    dest: "{{ app_stop_script }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  tags: test_service

- name: Ensure the PID directory exists with correct permissions
  file:
    path: "{{ app_pid_file | dirname }}"
    state: directory
    mode: '0755'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  tags: test_service
