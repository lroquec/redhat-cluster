---
- name: Temporarily mount NFS share
  ansible.builtin.mount:
    path: "/tmp/nfs_temp_mount"
    src: "{{ infra__redhat_cluster_nfs_server }}:{{ infra__redhat_cluster_nfs_share }}"
    fstype: nfs
    opts: "noatime,sync"
    state: mounted
  run_once: true
  delegate_to: "{{ infra__redhat_cluster_nodes[0].hostname }}"
  tags: watchdog

- name: Create witness directory on NFS
  ansible.builtin.file:
    path: "/tmp/nfs_temp_mount/witness"
    state: directory
    mode: "0755"
  run_once: true
  delegate_to: "{{ infra__redhat_cluster_nodes[0].hostname }}"
  tags: watchdog

- name: Unmount temporary NFS share
  ansible.builtin.mount:
    path: "/tmp/nfs_temp_mount"
    state: unmounted
  run_once: true
  delegate_to: "{{ infra__redhat_cluster_nodes[0].hostname }}"
  tags: watchdog

- name: Remove temporary mount point
  ansible.builtin.file:
    path: "/tmp/nfs_temp_mount"
    state: absent
  run_once: true
  delegate_to: "{{ infra__redhat_cluster_nodes[0].hostname }}"
  tags: watchdog

- name: Create mount point for witness
  ansible.builtin.file:
    path: "{{ infra__redhat_cluster_watchdog_nfs_witness_dir }}"
    state: directory
    mode: "0755"
  tags: watchdog

- name: Mount NFS witness directory
  ansible.builtin.mount:
    path: "{{ infra__redhat_cluster_watchdog_nfs_witness_dir }}"
    src: "{{ infra__redhat_cluster_nfs_server }}:{{ infra__redhat_cluster_nfs_share }}/witness"
    fstype: nfs
    opts: "noatime,sync"
    state: mounted
  tags: watchdog

- name: Create heartbeat-updater systemd service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/heartbeat-updater.service
    content: |
      [Unit]
      Description=Watchdog Heartbeat File Updater
      Before=watchdog.service
      After=network.target

      [Service]
      Type=simple
      ExecStart=/bin/bash -c 'while true; do touch /var/run/arbitrator-heartbeat; chmod 666 /var/run/arbitrator-heartbeat; sleep 30; done'
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
    owner: root
    group: root
    mode: '0644'
  tags: heartbeat

- name: Reload systemd daemon and enable/start heartbeat-updater service
  ansible.builtin.systemd:
    name: heartbeat-updater.service
    enabled: yes
    state: started
    daemon_reload: yes
  tags: heartbeat

- name: Wait for heartbeat to be updated at least once
  ansible.builtin.wait_for:
    path: /var/run/arbitrator-heartbeat
    state: present
  tags: heartbeat

- name: Pause to ensure heartbeat file is updated
  ansible.builtin.pause:
    seconds: 5
  tags: heartbeat

- name: Configure watchdog service
  ansible.builtin.template:
    src: watchdog.conf.j2
    dest: /etc/watchdog.conf
    owner: root
    group: root
    mode: '0644'
  tags: watchdog

- name: Create cluster arbitrator script from template
  ansible.builtin.template:
    src: cluster_arbitrator.sh.j2
    dest: /usr/local/bin/network-watchdog.sh
    owner: root
    group: root
    mode: '0755'
  tags: watchdog

- name: Create watchdog systemd service file
  ansible.builtin.template:
    src: network-watchdog.service.j2
    dest: /etc/systemd/system/network-watchdog.service
    owner: root
    group: root
    mode: '0644'
  tags: watchdog

- name: Create watchdog systemd timer file
  ansible.builtin.template:
    src: network-watchdog.timer.j2
    dest: /etc/systemd/system/network-watchdog.timer
    owner: root
    group: root
    mode: '0644'
  tags: watchdog

# Ensure files are created right now if not present
- name: Check if watchdog files exist
  ansible.builtin.stat:
    path: "{{ item }}"
  with_items:
    - "/run/watchdog.pid"
    - "/var/run/arbitrator-heartbeat"
  register: watchdog_files
  tags: watchdog

- name: Create necessary directories and files for watchdog
  ansible.builtin.file:
    path: "{{ item.item }}"
    state: touch
    mode: '0666'
    owner: root
    group: root
  with_items: "{{ watchdog_files.results }}"
  when: not item.stat.exists
  tags: watchdog

# Ensure files are created right at boot
- name: Create systemd-tmpfiles configuration for watchdog
  ansible.builtin.copy:
    content: |
      f /run/watchdog.pid 0666 root root
      f /run/arbitrator-heartbeat 0666 root root
    dest: /etc/tmpfiles.d/watchdog-permissions.conf
    owner: root
    group: root
    mode: '0666'
  tags: watchdog

- name: Create systemd override directory for watchdog
  ansible.builtin.file:
    path: /etc/systemd/system/watchdog.service.d
    state: directory
    mode: '0755'
    owner: root
    group: root
  tags: watchdog

- name: Create systemd override for watchdog
  ansible.builtin.copy:
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/sbin/watchdog -c /etc/watchdog.conf -v -f
    dest: /etc/systemd/system/watchdog.service.d/override.conf
    owner: root
    group: root
    mode: '0644'
  # notify: restart watchdog
  tags: watchdog

- name: Create custom SELinux module source file for watchdog
  ansible.builtin.copy:
    dest: /tmp/watchdog_custom.te
    content: |
      module watchdog_custom 1.0;

      require {
              type watchdog_t;
              type getty_t;
              type syslogd_t;
              type irqbalance_t;
              type systemd_logind_t;
              type sshd_t;
              type NetworkManager_t;
              type system_dbusd_t;
              type cluster_t;
              type chronyd_t;
              type crond_t;
              type var_run_t;
              type kernel_t;
              type gssproxy_t;
              type udev_t;
              type auditd_t;
              type firewalld_t;
              type rpcbind_t;
              type initrc_var_run_t;
              type file_t;
              class file { getattr open read write create unlink };
              class dir { search write add_name remove_name };
      }

      #============= watchdog_t ==============
      allow watchdog_t NetworkManager_t:dir search;
      allow watchdog_t auditd_t:dir search;
      allow watchdog_t chronyd_t:dir search;
      allow watchdog_t cluster_t:dir search;
      allow watchdog_t crond_t:dir search;
      allow watchdog_t firewalld_t:dir search;
      allow watchdog_t getty_t:dir search;
      allow watchdog_t gssproxy_t:dir search;
      allow watchdog_t irqbalance_t:dir search;
      allow watchdog_t kernel_t:dir search;
      allow watchdog_t rpcbind_t:dir search;
      allow watchdog_t sshd_t:dir search;
      allow watchdog_t syslogd_t:dir search;
      allow watchdog_t system_dbusd_t:dir search;
      allow watchdog_t systemd_logind_t:dir search;
      allow watchdog_t udev_t:dir search;
      allow watchdog_t initrc_var_run_t:file { open read };
      allow watchdog_t initrc_var_run_t:file getattr;
      allow watchdog_t kernel_t:file { getattr open read };
      allow watchdog_t var_run_t:file { getattr open read write create unlink };
      allow watchdog_t var_run_t:dir { search write add_name remove_name };
      allow watchdog_t file_t:file { getattr open read };
  tags: selinux

- name: Compile the SELinux module source to a module file
  ansible.builtin.command: checkmodule -M -m -o /tmp/watchdog_custom.mod /tmp/watchdog_custom.te
  args:
    creates: /tmp/watchdog_custom.mod
  tags: selinux

- name: Package the SELinux module into a policy package (.pp)
  ansible.builtin.command: semodule_package -o /tmp/watchdog_custom.pp -m /tmp/watchdog_custom.mod
  args:
    creates: /tmp/watchdog_custom.pp
  tags: selinux

- name: Install the custom SELinux module for watchdog
  ansible.builtin.command: semodule -i /tmp/watchdog_custom.pp
  tags: selinux

- name: Set permissive mode for watchdog type as fallback
  ansible.builtin.shell: |
    # Only try to set permissive mode if the type exists and is not already permissive
    if seinfo -t 2>/dev/null | grep -q watchdog_t && ! semanage permissive -l 2>/dev/null | grep -q watchdog_t; then
      semanage permissive -a watchdog_t
      echo "Set permissive mode for watchdog_t"
    else
      echo "Cannot set permissive mode (type does not exist or already permissive)"
    fi
  register: selinux_permissive
  changed_when: "'Set permissive mode for watchdog_t' in selinux_permissive.stdout"
  failed_when: false
  tags: selinux

- name: Enable and start watchdog timer
  ansible.builtin.systemd:
    name: network-watchdog.timer
    enabled: yes
    state: started
    daemon_reload: yes
  tags: watchdog

- name: Apply systemd-tmpfiles configuration immediately
  ansible.builtin.command: systemd-tmpfiles --create
  changed_when: false
  tags: watchdog

- name: Ensure heartbeat-updater service is running before watchdog
  ansible.builtin.systemd:
    name: heartbeat-updater
    state: started
    enabled: yes
  tags: watchdog

- name: Wait a moment for heartbeat file to be established
  ansible.builtin.pause:
    seconds: 5
  tags: watchdog

- name: Update heartbeat file manually to ensure freshness
  ansible.builtin.shell: |
    touch {{ infra__redhat_cluster_watchdog_heartbeat_file }}
    chmod 666 {{ infra__redhat_cluster_watchdog_heartbeat_file }}
    ls -la {{ infra__redhat_cluster_watchdog_heartbeat_file }}
  changed_when: false
  tags: watchdog

- name: Configure watchdog service state
  ansible.builtin.systemd:
    name: watchdog
    enabled: yes
    state: "{{ 'started' if infra__redhat_cluster_watchdog_enabled_by_default else 'stopped' }}"
  tags: watchdog
